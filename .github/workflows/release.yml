name: Release
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag'
        required: false
jobs:
  release-oci:
    name: Release OCI Images
    runs-on: ubuntu-latest
    env:
      RELEASE: ${{ inputs.tag != '' && inputs.tag || github.ref_name }}
    steps:
    - uses: actions/checkout@v5
      with:
        ref: ${{ env.RELEASE }}
        fetch-depth: 0
        filter: 'blob:none'
        fetch-tags: 'true'
    - name: Set up Docker
      uses: docker/setup-docker-action@v4
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - run: |
        echo '# syntax=docker/dockerfile:1-labs' | cat - Dockerfile > Dockerfile.new && mv Dockerfile.new Dockerfile
        docker login ghcr.io -u github-actions --password "${{ github.token }}"
        docker buildx build --push --platform=linux/amd64,linux/arm64 -t "ghcr.io/${{ github.repository_owner }}/odin:${{ env.RELEASE }}" .
  release-binaries:
    name: Release Binaries
    runs-on: ubuntu-latest
    env:
      RELEASE: ${{ inputs.tag != '' && inputs.tag || github.ref_name }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ env.RELEASE }}
      - uses: actions/setup-go@v6
        with:
          go-version: '1.25'
      - name: Build
        run: |
          TARGET_ARCH=("amd64" "arm64")
          TARGET_OS=("linux" "darwin" "windows")
          for arch in "${TARGET_ARCH[@]}"; do
            for os in "${TARGET_OS[@]}"; do
              GOOS="$os" GOARCH="$arch" go build -o odin-"$os"-"$arch" ./cmd/odin
            done
          done
      - name: Upload Builds
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release upload "$RELEASE" odin-*-*